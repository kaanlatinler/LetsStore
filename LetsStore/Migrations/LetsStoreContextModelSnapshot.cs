// <auto-generated />
using System;
using LetsStore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LetsStore.Migrations
{
    [DbContext(typeof(LetsStoreContext))]
    partial class LetsStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LetsStore.Models.Storage", b =>
                {
                    b.Property<Guid>("StorageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StorageID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UploadedDevice")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StorageId")
                        .HasName("PK__Storage__8A247E37C4215146");

                    b.ToTable("Storage", (string)null);
                });

            modelBuilder.Entity("LetsStore.Models.StorageMap", b =>
                {
                    b.Property<Guid>("StorageMapId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StorageMapID");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StorageID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("StorageMapId")
                        .HasName("PK__StorageM__02975C2C7470A5D4");

                    b.HasIndex("StorageId");

                    b.HasIndex("UserId");

                    b.ToTable("StorageMap", (string)null);
                });

            modelBuilder.Entity("LetsStore.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACE40DE002");

                    b.HasIndex(new[] { "UserEmail" }, "UQ__Users__08638DF8072995FA")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LetsStore.Models.StorageMap", b =>
                {
                    b.HasOne("LetsStore.Models.Storage", "Storage")
                        .WithMany("StorageMaps")
                        .HasForeignKey("StorageId")
                        .IsRequired()
                        .HasConstraintName("FK_StorageMap_Storage");

                    b.HasOne("LetsStore.Models.User", "User")
                        .WithMany("StorageMaps")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_StorageMap_Users");

                    b.Navigation("Storage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetsStore.Models.Storage", b =>
                {
                    b.Navigation("StorageMaps");
                });

            modelBuilder.Entity("LetsStore.Models.User", b =>
                {
                    b.Navigation("StorageMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
